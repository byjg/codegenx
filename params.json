{"name":"CodeGenX","tagline":"Code generator highly flexible and extensible based on Torque XML and XSL transformations","body":"CodeGenX\r\n========\r\n\r\nCode generator highly flexible and extensible based on Torque XML and XSL transformations\r\n\r\n## Introducing to CodeGenX\r\n\r\nCodeGenX is a Code generator highly flexible and extensible based on Torque XML and XSL transformations. You virtually can generate code targeted to any programming language just using your own XSL template.\r\n\r\n## Some CodeGenX features\r\n\r\n* Generate a single file from each table in Torque XML\r\n* Custom code added by user are not replaced when the CodeGenX generate the file again\r\n* Custom parameters for each table\r\n* Save a project for you codegen\r\n* Very fast!\r\n* Lightweight\r\n* Run in Windows (.NET) or Linux (Mono)\r\n\r\n## Generate code with CodeGenX\r\n\r\nThe first step is create a Torque XML. You can create your own XML file or you can use a tool to do this for you. We recommend Druid. Druid from Sourceforge is a database modeling tool and it have some specific features like generate a documentation from your database and export to Torque XML file. But if you know any other tool, let me know. The Torque XML will be like this:\r\n\r\n````XML\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<database name=\"mydatabase\">\r\n  <table name=\"mytable\">\r\n\t\t<column name=\"id\" primaryKey=\"true\" required=\"true\" type=\"int\"/>\r\n\t\t<column name=\"title\" required=\"true\" type=\"varchar\" size=\"30\"/>\r\n\t</table>\r\n</database>\r\n````\r\n\r\nAfter that, you have to create a XSL file. We know XSL is not a user friendly language, but it is powerful to transform a XML in any other thing you want. To make the things easier we recommend you create a XSL using the model below:\r\n\r\n````XSLT\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\r\n<!DOCTYPE xsl:stylesheet [\r\n\t<!ENTITY lower \"abcdefghijklmnopqrstuvwxyz\">\r\n\t<!ENTITY upper \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\">\r\n]>\r\n\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n    xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\" exclude-result-prefixes=\"msxsl\">\r\n\r\n\t<xsl:param name=\"tablename\"></xsl:param>\r\n\t<xsl:param name=\"package\"></xsl:param>\r\n\r\n\t<xsl:output method=\"text\"/>\r\n\r\n\t<xsl:template match=\"database\">\r\n\r\n\t\t<xsl:for-each select=\"table[@name=$tablename]\">\r\n\r\n\t\t<!-- START: PUT YOUR CODE HERE -->\r\n\r\n\t\t<!-- END: PUT YOUR CODE HERE -->\r\n\r\n\t\t</xsl:for-each>\r\n\r\n\t</xsl:template>\r\n\r\n\t<!-- PUT YOUR XSL FUNCTION HERE! -->\r\n\r\n</xsl:stylesheet>\r\n````\r\n\r\n\r\nThis is a suggestion. You can use any XSL you want.\r\n\r\nHere you can see how you can handle the Torque XML file:\r\n\r\n````XSLT\r\nclass <xsl:value-of select=\"$tablename\">\r\n{\r\n\t<xsl:for-each select=\"column\">\r\n\tprotected $_<xsl:value-of select=\"@name\">;\r\n\r\n\tpublic get<xsl:value-of select=\"@name\">()\r\n\t{\r\n\t\treturn $this->_<xsl:value-of select=\"@name\">;\r\n\t}\r\n\tpublic set<xsl:value-of select=\"@name\">($value)\r\n\t{\r\n\t\t$this->_<xsl:value-of select=\"@name\"> = $value;\r\n\t}\r\n\t</xsl:for-each>\r\n}\r\n````\r\n\r\nand the result code will be:\r\n\r\n````PHP\r\nclass mytable\r\n{\r\n\tprotected $_id;\r\n\r\n\tpublic getid()\r\n\t{\r\n\t\treturn $this->_id;\r\n\t}\r\n\tpublic setid($value)\r\n\t{\r\n\t\t$this->_id = $value;\r\n\t}\r\n\t\r\n\tprotected $_title;\r\n\r\n\tpublic gettitle()\r\n\t{\r\n\t\treturn $this->_title;\r\n\t}\r\n\tpublic settitle($value)\r\n\t{\r\n\t\t$this->_title = $value;\r\n\t}\r\n\t\r\n}\r\n````\r\n","google":"UA-874486-5","note":"Don't delete this file! It's used internally to help with page regeneration."}